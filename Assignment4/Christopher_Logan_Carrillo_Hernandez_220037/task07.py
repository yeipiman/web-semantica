# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ACMBtUkv1L851ecLwSAhSij2iOQW4PT

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples
# Search for all classes (RDFS.Class)
for cls in g.subjects(RDF.type, RDFS.Class):
    # Search for superclasses (RDFS.subClassOf)
    superclasses = list(g.objects(cls, RDFS.subClassOf))
    if superclasses:
        for sc in superclasses:
            result.append((cls, sc))
    else:
        result.append((cls, None))
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

# SPARQL query
query = """
SELECT ?c ?sc
WHERE {
    ?c rdf:type rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc }
}
ORDER BY ?c """ # ORDER BY is optional
for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []

# Get all classes that are Person or subclasses of Person
person_classes = set([ns.Person])

# Recursive function to get all subclasses
def get_subclasses(cls):
    for subclass in g.subjects(RDFS.subClassOf, cls):
        if subclass not in person_classes:
            person_classes.add(subclass)
            get_subclasses(subclass)

get_subclasses(ns.Person)

# Get all individuals for each class
for cls in person_classes:
    for ind in g.subjects(RDF.type, cls):
        individuals.append(ind)
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

# SPARQL query
query = f"""
SELECT ?ind
WHERE {{
    ?ind rdf:type/rdfs:subClassOf* <{ns}Person> .
}}
ORDER BY ?ind
""" #ORDER BY is optional
for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

# SPARQL query
query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?name ?type
WHERE {
    ?person ns:knows ns:Rocky .
    ?person rdfs:label ?name .
    ?person rdf:type ?type .
}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?name
WHERE {
    {
        # Direct colleague has a pet
        ?person ns:hasColleague ?col .
        ?col ns:ownsPet ?pet .
        ?pet rdf:type ns:Animal .
    }
    UNION
    {
        # Colleague of colleague has a pet
        ?person ns:hasColleague ?col .
        ?col ns:hasColleague ?col2 .
        ?col2 ns:ownsPet ?pet2 .
        ?pet2 rdf:type ns:Animal .
    }
    ?person rdfs:label ?name .
}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")