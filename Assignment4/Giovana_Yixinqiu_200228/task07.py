# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()




"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
ns = Namespace("http://oeg.fi.upm.es/def/people#")

result = []
for c in g.subjects(RDF.type, RDFS.Class):
    superclass = None
    for sc in g.objects(c, RDFS.subClassOf):
        superclass = sc
    result.append((c, superclass))

# Visualize the results
for r in result:
    print(r)

## Validation: Do not remove
report.validate_07_1a(result)



"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
SELECT DISTINCT ?c ?sc
WHERE {
  ?c rdf:type rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)




"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []


for s in g.subjects(RDF.type, ns.Person):
    individuals.append(s)
to_explore = [ns.Person]
visited = set()

while to_explore:
    current = to_explore.pop()
    visited.add(current)
    for subclass in g.subjects(RDFS.subClassOf, current):
        if subclass not in visited:
            to_explore.append(subclass)
        for s in g.subjects(RDF.type, subclass):
            if s not in individuals:
                individuals.append(s)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)





"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
SELECT DISTINCT ?ind
WHERE {
  { ?ind rdf:type ns:Person . }
  UNION
  { ?sub1 rdfs:subClassOf ns:Person .
    ?ind rdf:type ?sub1 . }
  UNION
  { ?sub2 rdfs:subClassOf ?sub1 .
    ?ind rdf:type ?sub2 . }
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)



"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX ppl:  <http://oeg.fi.upm.es/def/people#>
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name ?type
WHERE {
  ?ind rdf:type ?type .
  FILTER EXISTS { ?ind ppl:knows ppl:Rocky . }
  OPTIONAL { ?ind rdfs:label ?name . }
}
"""

# TO DO
# Visualize the results

for r in g.query(query):
    print(r.name)

## Validation: Do not remove
report.validate_07_03(g, query)




"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""


query = """
PREFIX p:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  VALUES ?rel { p:hasColleague }
  ?person ?rel ?mid .

  {
    ?mid p:ownsPet ?pet .
  }
  UNION
  {
    ?mid p:hasColleague ?other .
    ?other p:ownsPet ?pet .
  }

  ?pet a p:Animal .
  ?person rdfs:label ?name .
}
"""



for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")

