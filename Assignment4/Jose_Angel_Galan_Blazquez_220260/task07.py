# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

# pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report


"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()


"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TASK 7.1a: List all classes and their superclasses using RDFLib
result = []  # list of tuples

# Query all classes
for s in g.subjects(RDF.type, RDFS.Class):
    # Check if the class has a superclass
    superclass = g.value(subject=s, predicate=RDFS.subClassOf)
    if superclass:
        result.append((s, superclass))
    else:
        result.append((s, None))

# Visualize the results
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)


"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

# TASK 7.1b: Repeat using SPARQL
query = """
SELECT ?c ?sc
WHERE {
  ?c a rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)


"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""
# TASK 7.2a: List all individuals of Person using RDFLib
ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []

# Get all subclasses of Person (including Person itself)
def get_all_subclasses(g, class_uri):
    """Recursively get all subclasses of a class"""
    subclasses = set([class_uri])
    for subclass in g.subjects(RDFS.subClassOf, class_uri):
        subclasses.update(get_all_subclasses(g, subclass))
    return subclasses

# Get all classes that are Person or subclasses of Person
person_classes = get_all_subclasses(g, ns.Person)

# Get all individuals of these classes
for person_class in person_classes:
    for individual in g.subjects(RDF.type, person_class):
        if individual not in individuals:
            individuals.append(individual)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)


"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""


# TASK 7.2b: Repeat using SPARQL
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?ind
WHERE {
  ?ind a ?class .
  ?class rdfs:subClassOf* ontology:Person .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)


"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

# TASK 7.3: List name and type of those who know Rocky using SPARQL
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>

SELECT ?name ?type
WHERE {
  ?entity ontology:knows ontology:Rocky .
  ?entity rdfs:label ?name .
  ?entity a ?type .
  FILTER (?type != rdfs:Class)
}
"""

# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)


"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""


# TASK 7.4: List name of entities with colleague who has a dog (directly or through colleague)
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>

SELECT DISTINCT ?name
WHERE {
  ?entity rdfs:label ?name .
  {
    # Case 1: Has a colleague who owns a pet
    ?entity ontology:hasColleague ?colleague .
    ?colleague ontology:ownsPet ?pet .
  }
  UNION
  {
    # Case 2: Has a colleague who has a colleague who owns a pet
    ?entity ontology:hasColleague ?colleague1 .
    ?colleague1 ontology:hasColleague ?colleague2 .
    ?colleague2 ontology:ownsPet ?pet .
  }
}
"""

for r in g.query(query):
  print(r.name)

# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")
