# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TAdwoT6dRZnpvEold_JGL_3gpRF0XUSO

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples

seen_classes = set()  #to avoid duplicates
for cls in g.subjects(RDF.type, RDFS.Class):
  if cls in seen_classes:
    continue
  seen_classes.add(cls)
  #to get the superclass ('None' if not found)
  superclass_uri = g.value(subject=cls, predicate=RDFS.subClassOf, object=None)
  result.append((cls, superclass_uri))

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
SELECT DISTINCT ?c ?sc
WHERE {
  ?c rdf:type rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []

# find all subclasses of ns.Person (including itself)
related_classes = {ns.Person}
for subclass, superclass in g.subject_objects(RDFS.subClassOf):
  if superclass == ns.Person or superclass in related_classes:
    related_classes.add(subclass)
# find all individuals of these classes and append them to the list
for cls in related_classes:
  for ind in g.subjects(RDF.type, cls):
    if ind not in individuals:  # to avoid duplicates
      individuals.append(ind)

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

from rdflib.plugins.sparql import prepareQuery

query = prepareQuery("""
SELECT DISTINCT ?ind
WHERE {
  ?cls rdfs:subClassOf* ns:Person .
  ?ind rdf:type ?cls .
}
""",
initNs={"rdf": RDF, "rdfs": RDFS, "ns": ns}
)

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = prepareQuery("""
SELECT DISTINCT ?name ?type
WHERE {
  ?ind ns:knows ns:Rocky .
  ?ind rdf:type ?type .
  { ?ind ns:hasName ?name . } UNION { ?ind rdfs:label ?name . }
}
""",
initNs={"rdf": RDF, "rdfs": RDFS, "ns": ns}
)

# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = prepareQuery("""
SELECT DISTINCT ?name
WHERE {
  ?person rdfs:label ?name .
  ?person ns:hasColleague ?colleague .
  # colleague owns a pet
  {
    ?colleague ns:ownsPet ?pet .
  }
  UNION
  # colleague of a colleague owns a pet
  {
    ?colleague ns:hasColleague ?colleague2 .
    ?colleague2 ns:ownsPet ?pet .
  }
}
""",
initNs={"rdfs": RDFS, "ns": ns}
)

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")