# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

#!pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="ttl")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples

for c in g.subjects(RDF.type, RDFS.Class):
    superclass = next(g.objects(c, RDFS.subClassOf), None)
    result.append((c, superclass))

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?c ?sc WHERE {
  ?c a rdfs:Class .
  OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""


for r in g.query(query):
  print(r.c, r.sc)


## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

people = Namespace("http://oeg.fi.upm.es/def/people#")
ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
individuals = []

# Find all individuals that are instances of Person or its subclasses
for individual in g.subjects(RDF.type, None):
  # Check if the individual is of type Person or any subclass of Person
  for rdf_type in g.objects(individual, RDF.type):
    # Check if this type is Person or a subclass of Person
    if rdf_type == people.Person or (rdf_type, RDFS.subClassOf, people.Person) in g:
      if individual not in individuals:
        individuals.append(individual)
      break
    # Also check for transitive subclass relationships
    for superclass in g.transitive_objects(rdf_type, RDFS.subClassOf):
      if superclass == people.Person:
        if individual not in individuals:
          individuals.append(individual)
        break

# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?ind WHERE {
  ?ind rdf:type ?cls .
  ?cls rdfs:subClassOf* ns:Person .
}
"""
# Visualize the results
for r in g.query(query):
  print(r.ind)
## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""
# TO DO
query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?name ?type WHERE {
  ?ind ns:knows ns:Rocky .
  ?ind rdfs:label ?name .
  ?ind rdf:type ?type .
}
"""

# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

# TO DO
query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?name WHERE {
  {
    ?person ns:hasColleague ?colleague1 .
    ?colleague1 ns:ownsPet ?pet .
    ?pet a ns:Animal .
  }
  UNION
  {
    ?person ns:hasColleague ?colleague1 .
    ?colleague1 ns:hasColleague ?colleague2 .
    ?colleague2 ns:ownsPet ?pet .
    ?pet a ns:Animal .
  }
  ?person rdfs:label ?name .
}
"""
# Visualize the results
for r in g.query(query):
  print(r.name)
## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")