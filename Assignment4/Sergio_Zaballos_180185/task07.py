#!pip install rdflib
# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
# Visualize the results
result = [] #list of tuples
vistas = set()
for c in g.subjects(RDF.type, RDFS.Class):
    if c in vistas: #duplicado
        continue
    vistas.add(c)
    sc = g.value(subject=c, predicate=RDFS.subClassOf, object=None)  #none si no tiene superclase
    result.append((c, sc))
    
for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  '''
        Select DISTINCT ?c ?sc WHERE
        {
            ?c a rdfs:Class .
            OPTIONAL { ?c rdfs:subClassOf ?sc. }
        }
        '''

for r in g.query(query):
    print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

p = Namespace("http://oeg.fi.upm.es/def/people#")
ns = Namespace("http://somewhere#")  


# variable to return
individuals = []

# Todas las subclases (transitivas) de Person + la propia Person
classes = set(g.transitive_subjects(RDFS.subClassOf, p.Person)) | {p.Person}

# ,Todos los individuos que tengan rdf:type en cualquiera de esas clases
individuals = sorted({s for c in classes for s in g.subjects(RDF.type, c)}, key=str)

for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""
from rdflib.plugins.sparql import prepareQuery #para querys SPARQL

query = prepareQuery( '''SELECT ?ind WHERE{
            ?ind rdf:type ?s .
            ?s rdfs:subClassOf* p:Person .
            } ''', initNs={"p":p, "rdf":RDF, "rdfs":RDFS})


for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = prepareQuery( '''SELECT ?name ?type WHERE {
            
              
            ?ind p:knows p:Rocky .
            ?ind rdf:type ?type .
            {
            ?ind p:hasName ?name .
            }
            UNION{
            ?ind rdfs:label ?name .
            }
            } ''', initNs={"p": p, "rdf": RDF, "rdfs":RDFS})
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = prepareQuery( '''SELECT DISTINCT ?name WHERE {

            
              ?ind rdfs:label ?name .
            

            ?ind p:hasColleague ?dueño .
            
            {
            ?dueño p:ownsPet ?mascota .
            }
            UNION{
            ?dueño p:hasColleague ?dueño2 .
            ?dueño2 p:ownsPet ?mascota .
            }

            } ''', initNs={"p": p, "rdfs":RDFS}
            )


for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")
