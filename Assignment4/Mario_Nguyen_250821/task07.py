# -*- coding: utf-8 -*-
"""Kopie von Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SvncRh3pHFCRBINkDjn_-Qa0GABN3NhG

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

# TO DO
result = [] #list of tuples
for c in g.subjects(RDF.type, RDFS.Class):
    superclass = None
    for sc in g.objects(c, RDFS.subClassOf):
        superclass = sc
    result.append((c, superclass))
# Visualize the results

for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query =  """
SELECT DISTINCT ?c ?sc
  WHERE {
    ?c rdf:type rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc . }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

ns = Namespace("http://oeg.fi.upm.es/def/people#")

# variable to return
all_individuals = set(g.subjects(RDF.type, None))
individuals = set()

relevant_classes = {ns.Person}
new_classes_found = True
while new_classes_found:
    new_classes_found = False
    for c in list(relevant_classes):
        for sc in g.subjects(RDFS.subClassOf, c):
            if sc not in relevant_classes:
                relevant_classes.add(sc)
                new_classes_found = True

for i in all_individuals:
    for c in g.objects(i, RDF.type):
        if c in relevant_classes:
            individuals.add(i)
            break
# visualize results
for i in individuals:
  print(i)

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query =  """
PREFIX ns: <http://oeg.fi.upm.es/def/people#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?ind
  WHERE {
    ?ind rdf:type ?type .
    ?type rdfs:subClassOf* ns:Person .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query =  """
PREFIX ns:  <http://oeg.fi.upm.es/def/people#>
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name ?type
  WHERE {
    ?ind ns:knows ns:Rocky .
    ?ind rdf:type ?type .
    OPTIONAL { ?ind rdfs:label ?name }
}
"""
# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query =  """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
  WHERE {
  {
    ?person ns:hasColleague ?colleague1 .
    ?colleague1 ns:ownsPet ?pet .
    ?pet a ns:Animal .
  } UNION {
    ?person ns:hasColleague ?colleague1 .
    ?colleague1 ns:hasColleague ?colleague2 .
    ?colleague2 ns:ownsPet ?pet .
    ?pet a ns:Animal .
  }
  ?person rdfs:label ?name .
}
"""

for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")