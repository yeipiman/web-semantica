# SPARQL Verification Queries for Madrid Events RDF Data
# Group 11 - Event Finder Madrid Data

# Define prefixes
PREFIX mdo: <http://eventFinder.org/madrid-data/ontology#>
PREFIX mdr: <http://eventFinder.org/madrid-data/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# ==============================================================================

# Query 1: Count total triples and verify data was loaded
SELECT (COUNT(*) as ?totalTriples)
WHERE {
  ?s ?p ?o .
}

# ------------------------------------------------------------------------------

# Query 2: Count Event instances (should be 744)
SELECT (COUNT(?event) as ?totalEvents)
WHERE {
  ?event a mdo:Event .
}

# ------------------------------------------------------------------------------

# Query 3: List all properties used in Events
SELECT DISTINCT ?property (COUNT(*) as ?usage)
WHERE {
  ?event a mdo:Event ;
         ?property ?value .
}
GROUP BY ?property
ORDER BY DESC(?usage)

# ------------------------------------------------------------------------------

# Query 4: Check Events with complete main information
SELECT (COUNT(DISTINCT ?event) as ?completeEvents)
WHERE {
  ?event a mdo:Event ;
         mdo:idEvento ?id ;
         mdo:titulo ?titulo ;
         mdo:fecha ?fecha ;
         mdo:nombreInstalacion ?instalacion .
}

# ------------------------------------------------------------------------------

# Query 5: Find duplicate event IDs
SELECT ?id (COUNT(?event) as ?duplicates)
WHERE {
  ?event a mdo:Event ;
         mdo:idEvento ?id .
}
GROUP BY ?id
HAVING (COUNT(?event) > 1)

# ------------------------------------------------------------------------------

# Query 6: Verify free vs paid events consistency
SELECT (COUNT(?inconsistent) as ?inconsistentPricing)
WHERE {
  ?inconsistent a mdo:Event ;
                mdo:precio ?precio ;
                mdo:gratuito ?gratuito .
  FILTER(
    (?gratuito = 1 && ?precio != "" && ?precio != "0") ||
    (?gratuito = 0 && (?precio = "" || ?precio = "0"))
  )
}

# ------------------------------------------------------------------------------

# Query 7: Distribution of events by district
SELECT ?distrito (COUNT(?event) as ?eventCount)
WHERE {
  ?event a mdo:Event ;
         mdo:distritoInstalacion ?distrito .
}
GROUP BY ?distrito
ORDER BY DESC(?eventCount)

# ------------------------------------------------------------------------------

# Query 8: Distribution of events by type
SELECT ?tipo (COUNT(?event) as ?numberOfEvents)
WHERE {
  ?event a mdo:Event ;
         mdo:tipo ?tipo .
}
GROUP BY ?tipo
ORDER BY DESC(?numberOfEvents)

# ------------------------------------------------------------------------------

# Query 9: Sample events with main properties
SELECT ?event ?titulo ?fecha ?precio ?distrito ?tipo
WHERE {
  ?event a mdo:Event ;
         mdo:titulo ?titulo ;
         mdo:fecha ?fecha .
  OPTIONAL { ?event mdo:precio ?precio }
  OPTIONAL { ?event mdo:distritoInstalacion ?distrito }
  OPTIONAL { ?event mdo:tipo ?tipo }
}
ORDER BY ?fecha
LIMIT 10

# ------------------------------------------------------------------------------

# Query 10: Statistical summary
SELECT 
  (COUNT(DISTINCT ?event) as ?totalEvents)
  (COUNT(DISTINCT ?gratuito) as ?freeEvents) 
  (COUNT(DISTINCT ?distrito) as ?districtsWithEvents)
  (COUNT(DISTINCT ?tipo) as ?eventTypes)
WHERE {
  ?event a mdo:Event .
  OPTIONAL { 
    ?event mdo:gratuito ?g .
    FILTER(?g = 1)
    BIND(?event as ?gratuito)
  }
  OPTIONAL { ?event mdo:distritoInstalacion ?distrito }
  OPTIONAL { ?event mdo:tipo ?tipo }
}

# ------------------------------------------------------------------------------

# Query 11: Validate Madrid postal codes (should start with 28)
SELECT (COUNT(?event) as ?invalidPostalCodes)
WHERE {
  ?event a mdo:Event ;
         mdo:codigoPostalInstalacion ?codigoPostal .
  FILTER(!REGEX(STR(?codigoPostal), "^28"))
}

# ------------------------------------------------------------------------------

# Query 12: Check data types
SELECT ?property (DATATYPE(?value) as ?datatype) (COUNT(*) as ?count)
WHERE {
  ?event a mdo:Event ;
         ?property ?value .
  FILTER(isLiteral(?value))
}
GROUP BY ?property ?datatype
ORDER BY ?property