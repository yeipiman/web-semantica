################################################################################
# PREFIXES
################################################################################
PREFIX ns:  <https://data.smartcitymadrid.es/ontology/parking#>
PREFIX ex:  <https://data.smartcitymadrid.es/id/parking/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

################################################################################
# QUERY 1 - First ten parkings (id, name and address) ordered by ascending id
## Retrieves the first ten parking resources, returning their identifier (ns:hasId), name (ns:hasName) and address (ns:hasAddress), ordered by the parking identifier in ascending order
################################################################################
SELECT ?id ?name ?address 
WHERE {
  ?s a ns:Parking ;
     ns:hasId ?id ;
     ns:hasName ?name ;
     ns:hasAddress ?address .
}
ORDER BY xsd:integer(?id)
LIMIT 10

################################################################################
# QUERY 2 - EMT parkings (true) with postal code
## Returns the first ten parking resources that are managed by EMT (ns:isEMTParking = true), including their postal code (ns:hasAreaCode) and identifier
################################################################################
SELECT ?id ?name ?pc ?emtParking 
WHERE {
  ?s a ns:Parking ;
     ns:hasId ?id ;
     ns:hasName ?name ;
     ns:hasAreaCode ?pc ;
     ns:hasLocation ?loc .
  ?loc ns:isEMTParking ?emtParking .
  FILTER(?emtParking = true)
}
ORDER BY xsd:integer(?id)
LIMIT 10

################################################################################
# QUERY 3 - Total number of parkings
## Counts the total number of parking resources (ns:Parking) in the dataset
################################################################################
SELECT (COUNT(?s) AS ?nParkings) 
WHERE {
  ?s a ns:Parking .
}

################################################################################
# QUERY 4 - Number of parkings whose address contains “plaza” (case-insensitive)
## Counts how many parking resources have an address (ns:hasAddress) containing the word “plaza”, ignoring case sensitivity
################################################################################
SELECT (COUNT(?s) AS ?nParkings) 
WHERE {
  ?s a ns:Parking ;
     ns:hasAddress ?address .
  FILTER(CONTAINS(LCASE(STR(?address)), "plaza"))
}

################################################################################
# QUERY 5 - Average latitude and longitude of all parkings
## Calculates the average latitude and longitude of all parking resources
################################################################################
SELECT (AVG(xsd:double(?lat)) AS ?avgLat)
       (AVG(xsd:double(?long)) AS ?avgLong)
WHERE {
  ?s a ns:Parking ;
     ns:hasLocation ?loc .
  ?loc ns:hasLatitude ?lat ;
       ns:hasLongitude ?long .
}

################################################################################
# QUERY 6 - Parkings sharing the same postal code (potential duplicates)
## Identifies postal codes (ns:hasAreaCode) that are shared by more than one parking resource, and shows how many parkings correspond to each code
################################################################################
SELECT ?pc (COUNT(?s) AS ?nParkings)
WHERE {
  ?s a ns:Parking ;
     ns:hasAreaCode ?pc .
}
GROUP BY ?pc
HAVING (COUNT(?s) > 1)
ORDER BY DESC(?nParkings)

################################################################################
# QUERY 7 - Top ten parkings ordered by latitude (north to south)
## Retrieves the ten northernmost parking resources, showing their identifier (ns:hasId), name (ns:hasName), town (ns:hasTown), and latitude (ns:hasLatitude)
################################################################################
SELECT ?id ?name ?town ?lat
WHERE {
  ?s a ns:Parking ;
     ns:hasId ?id ;
     ns:hasName ?name ;
     ns:hasLocation ?loc .
  ?loc ns:hasTown ?town ;
       ns:hasLatitude ?lat .
}
ORDER BY DESC(xsd:double(?lat))
LIMIT 10

################################################################################
# QUERY 8 - Top ten westernmost parkings (lowest longitude values)
## Retrieves the ten parking resources with the smallest longitude values (the westernmost ones), showing their identifier (ns:hasId), name (ns:hasName), town (ns:hasTown), and longitude (ns:hasLongitude)
################################################################################
SELECT ?id ?name ?town ?long
WHERE {
  ?s a ns:Parking ;
     ns:hasId ?id ;
     ns:hasName ?name ;
     ns:hasLocation ?loc .
  ?loc ns:hasTown ?town ;
       ns:hasLongitude ?long .
}
ORDER BY ASC(xsd:double(?long))
LIMIT 10
